let a: Nat = let x: Nat = 20 in x  + 10

let b: Nat = let f (x: Nat): Nat = x + 1 in f 0
# 1
let c: Nat = let (f (x: Nat): Nat) = x + 1 in f 3
# 4

let d: Nat -> Nat -> Nat = fun (x: Nat) (y: Nat) -> x + y
# fun (x : Nat) -> fun (y : Nat) -> x + y : Nat -> Nat -> Nat

let e: Nat -> Nat -> Nat -> Nat -> Nat = fun (x: Nat) (y: Nat) (z: Nat) (k: Nat) -> x + y
# fun (x : Nat) -> fun (y : Nat) -> fun (z : Nat) -> fun (k : Nat) -> x + y : Nat -> Nat -> Nat -> Nat -> Nat

let f: Nat -> Nat -> Nat = fix (gcd: Nat -> Nat -> Nat)(m: Nat)(n: Nat) -> ifz n then m else ifz m then n else ifz (m - (n+1)) then gcd m (m - n) else gcd (m-n) n
# fix (gcd : Nat -> Nat -> Nat) (m : Nat) ->
#      fun (n : Nat) ->
#        ifz
#          n
#          then
#          m
#          else
#          ifz m then n else ifz m - (n + 1) then gcd m (m - n) else gcd (m - n) n : Nat -> Nat -> Nat

let g: Nat = let f: Nat -> Nat -> Nat = fun (x : Nat) -> fun (y : Nat) -> x + y in f 3 3
# 6 : Nat
let h: Nat = let f (x: Nat) (y:Nat): Nat = x + y in f 3 3
# 6 : Nat
let i: Nat = let (f (x: Nat) (y:Nat): Nat) = x + y in f 3 3
# 6 : Nat

let j: Nat = let rec gcd (m: Nat) (n: Nat): Nat = ifz n then m else ifz m then n else ifz (m - (n+1)) then gcd m (m - n) else gcd (m-n) n in gcd 6 3
# 3 : Nat

let k: Nat -> Nat -> Nat = fix (gcd: Nat -> Nat -> Nat)(m: Nat)(n: Nat) -> 0
# fix (gcd : Nat -> Nat -> Nat) (m : Nat) -> fun (n : Nat) -> 0 : Nat -> Nat -> Nat